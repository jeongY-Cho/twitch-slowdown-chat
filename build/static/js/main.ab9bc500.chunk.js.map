{"version":3,"sources":["Client.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["pubSub","subs","cb","this","push","payload","sub","MessageLedger","maxSize","expireAfter","top","threshold","freqDict","count","matcher","Fuse","includeScore","ignoreLocation","str","match","search","item","setTimeout","windDown","printHead","add","key","remove","doc","arr","Object","keys","sort","a","b","slice","map","publish","ChatClient","options","ledger","max_size","socket","WebSocket","onopen","send","token","username","channel","toLowerCase","onmessage","data","toString","console","log","cleanString","split","replace","e","error","trim","App","client","state","accessParms","msgs","sensitivity","timeSpan","showTop","connected","changed","connectToChat","connectToChannel","access_token","setState","changeSettings","preventDefault","changeThreshold","onFormChange","target","name","value","channelChange","getHashParams","style","height","width","display","justifyContent","alignItems","marginBottom","onSubmit","className","htmlFor","type","placeholder","onChange","disabled","id","min","max","step","i","React","Component","LandingPage","flexDirection","href","document","location","backgroundColor","color","padding","borderRadius","hashParams","r","d","s","decodeURIComponent","q","window","hash","substring","exec","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ab9bc500.chunk.js","sourcesContent":["import Fuse from \"fuse.js\";\n\nclass PubSub<T> {\n  subs: ((payload: T) => void)[] = [];\n\n  add(cb: (payload: T) => void) {\n    this.subs.push(cb);\n  }\n\n  publish(payload: T) {\n    for (let sub of this.subs) {\n      sub(payload);\n    }\n  }\n}\n\nexport const pubSub = new PubSub<[string, number][]>();\n\nclass MessageLedger {\n  freqDict: { [key: string]: number } = {};\n  count = 0;\n  matcher = new Fuse<string>([], {\n    includeScore: true,\n    threshold: this.threshold,\n    ignoreLocation: true,\n  });\n  constructor(\n    public maxSize: number = 1000,\n    public expireAfter: number = 10000,\n    public top: number = 20,\n    public threshold: number = 0.2\n  ) {}\n\n  add(str: string) {\n    if (str === \"\") return;\n\n    // match str to something in dict\n    let match = this.matcher.search(str)[0];\n    if (match) {\n      str = match.item;\n      // console.log(`<${ogStr}> matched as <${match.item}>`);\n    }\n\n    if (this.count < this.maxSize) {\n      if (this.freqDict[str]) {\n        this.freqDict[str]++;\n        setTimeout(() => {\n          this.windDown(str);\n        }, this.expireAfter);\n        this.printHead();\n      } else {\n        this.freqDict[str] = 1;\n        this.matcher.add(str);\n        this.count++;\n        setTimeout(() => {\n          this.windDown(str);\n        }, this.expireAfter);\n        this.printHead();\n      }\n    } else {\n      if (this.freqDict[str]) {\n        this.freqDict[str]++;\n        setTimeout(() => {\n          this.windDown(str);\n        }, this.expireAfter);\n        this.printHead();\n      }\n    }\n  }\n\n  windDown(key: string) {\n    if (this.freqDict[key]) {\n      this.freqDict[key]--;\n      if (!this.freqDict[key]) {\n        this.matcher.remove((doc) => doc === key);\n        this.count--;\n        delete this.freqDict[key];\n      }\n    }\n    this.printHead();\n  }\n  printHead() {\n    const arr = Object.keys(this.freqDict)\n      .sort((a, b) => this.freqDict[b] - this.freqDict[a])\n      .slice(0, this.top)\n      .map((key) => [key, this.freqDict[key]]);\n    pubSub.publish(arr as [string, number][]);\n    // console.log(arr, Object.keys(this.freqDict).length);\n  }\n\n  changeThreshold(threshold: number) {\n    if (threshold === this.threshold) {\n      return;\n    }\n    this.threshold = threshold;\n    this.matcher = new Fuse(Object.keys(this.freqDict), {\n      includeScore: true,\n      threshold: this.threshold,\n      ignoreLocation: true,\n    });\n  }\n}\n\ntype ClientOptions = {\n  max_size: number;\n  username: string;\n  token: string;\n  channel: string;\n};\n\nexport default class ChatClient {\n  ledger = new MessageLedger(this.options.max_size);\n  socket: WebSocket;\n  constructor(public options: ClientOptions) {\n    this.socket = new WebSocket(\"wss://irc-ws.chat.twitch.tv:443\");\n    this.socket.onopen = () => {\n      this.socket.send(`PASS oauth:${this.options.token}`);\n      this.socket.send(`NICK ${this.options.username}`);\n      this.socket.send(`JOIN #${this.options.channel.toLowerCase()}`);\n    };\n    this.socket.onmessage = ({ data }) => {\n      if (data.toString().match(\"PING :tmi.twitch.tv\")) {\n        console.log(data);\n        this.socket.send(\"PONG: tmi.twitch.tv\");\n      }\n      try {\n        let str = ChatClient.cleanString(\n          data.toString().split(\":\")[2].replace(/\\r|\\n/g, \"\")\n        );\n        this.ledger.add(str);\n      } catch (e) {\n        console.error(e);\n        console.log(data);\n      }\n    };\n  }\n\n  static cleanString(str: string): string {\n    return str\n      .replace(/(\\b\\S+\\b)(?=.*\\1)/gi, \"\")\n      .replace(/!.+|@.+/gi, \"\")\n      .replace(/ +/g, \" \")\n      .toLowerCase()\n      .trim();\n  }\n\n  connectToChannel(channel: string) {\n    this.socket.send(`PART #${this.options.channel}`);\n    this.socket.send(`JOIN #${channel.toLowerCase()}`);\n    this.options.channel = channel;\n  }\n}\n","import React from \"react\";\nimport ChatClient, { pubSub } from \"./Client\";\nimport \"./App.css\";\n\ninterface IAppState {\n  accessParms: { [key: string]: string };\n  msgs: [string, number][];\n  sensitivity: number;\n  timeSpan: number;\n  showTop: number;\n  changed: boolean;\n  connected: false;\n  channel: string;\n}\n\nclass App extends React.Component<{}, IAppState> {\n  client: ChatClient | undefined;\n  state: IAppState = {\n    accessParms: {},\n    msgs: [[\"Connect to a channel on the left\", 1]],\n    sensitivity: 0.2,\n    timeSpan: 30,\n    showTop: 20,\n    connected: false,\n    channel: \"\",\n    changed: false,\n  };\n\n  connectToChat = (channel: string) => {\n    if (this.client) {\n      this.client.connectToChannel(channel);\n    } else {\n      console.log(\"connecting to \", channel);\n      this.client = new ChatClient({\n        channel: channel,\n        max_size: 1000,\n        token: this.state.accessParms.access_token,\n        username: \"abc\",\n      });\n      pubSub.add((payload) => {\n        this.setState({\n          msgs: payload,\n        });\n        // console.log(payload);\n      });\n    }\n  };\n\n  componentDidMount() {\n    console.log(getHashParams());\n    this.setState({\n      accessParms: getHashParams(),\n    });\n  }\n\n  changeSettings = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (this.client) {\n      this.client.ledger.top = this.state.showTop;\n      this.client.ledger.expireAfter = this.state.timeSpan * 1000;\n      this.client.ledger.changeThreshold(this.state.sensitivity);\n    }\n    this.setState({\n      changed: false,\n    });\n  };\n\n  onFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(e.target.name, e.target.value);\n    // @ts-ignore\n    this.setState({\n      [e.target.name]: e.target.value,\n      changed: true,\n    });\n  };\n\n  channelChange = (e: any) => {\n    this.setState({\n      channel: e.target.value,\n    });\n  };\n\n  render() {\n    const { accessParms, msgs } = this.state;\n    if (accessParms.access_token) {\n      return (\n        <div\n          style={{\n            height: \"100vh\",\n            width: \"100vw\",\n            display: \"flex\",\n            justifyContent: \"space-evenly\",\n            alignItems: \"center\",\n          }}\n        >\n          <div>\n            <form\n              style={{ marginBottom: 10 }}\n              onSubmit={(e: any) => {\n                e.preventDefault();\n                this.connectToChat(this.state.channel);\n              }}\n            >\n              <div className=\"form-group\">\n                <label htmlFor=\"channelName\">Connect to Channel:</label>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Channel Name\"\n                  value={this.state.channel}\n                  name=\"channel\"\n                  onChange={this.channelChange}\n                />\n              </div>\n              <button\n                className=\"btn btn-primary\"\n                type=\"submit\"\n                disabled={!this.state.channel}\n              >\n                Connect to {this.state.channel}\n              </button>\n            </form>\n            <form className=\"\" onSubmit={this.changeSettings}>\n              <div className=\"form-group\">\n                <label htmlFor=\"sensitivity\">\n                  Sensitivity: {this.state.sensitivity}\n                </label>\n                <input\n                  type=\"range\"\n                  name=\"sensitivity\"\n                  id=\"sensitivity\"\n                  className=\"custom-range\"\n                  min={0}\n                  max={1}\n                  step={0.1}\n                  value={this.state.sensitivity}\n                  onChange={this.onFormChange}\n                />\n                <small id=\"sensitivityHelp\" className=\"form-text text-muted\">\n                  Text matching will match more exactly as sensitivity\n                  decreases.\n                </small>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"Show Top n\">\n                  Show top {this.state.showTop} comments:\n                </label>\n                <input\n                  type=\"range\"\n                  className=\"custom-range\"\n                  name=\"showTop\"\n                  id=\"Show Top n\"\n                  min={2}\n                  max={40}\n                  step={1}\n                  value={this.state.showTop}\n                  onChange={this.onFormChange}\n                />\n                <small id=\"showTopHelp\" className=\"form-text text-muted\">\n                  Increase to see more chat messages.\n                </small>\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"Time Span\">\n                  Count over {this.state.timeSpan} seconds:\n                </label>\n                <input\n                  className=\"custom-range\"\n                  type=\"range\"\n                  name=\"timeSpan\"\n                  id=\"Time Span\"\n                  min={2}\n                  max={60}\n                  value={this.state.timeSpan}\n                  onChange={this.onFormChange}\n                />\n                <small id=\"timeSpanHelp\" className=\"form-text text-muted\">\n                  Increase to count messages over a longer time.\n                </small>\n              </div>\n              <button\n                className={\n                  this.state.changed ? \"btn btn-primary\" : \"btn btn-secondary\"\n                }\n                type=\"submit\"\n                disabled={!this.state.changed}\n              >\n                Change Settings\n              </button>\n            </form>\n          </div>\n          <div style={{ width: \"30vw\" }}>\n            <table>\n              <colgroup>\n                <col style={{ width: 20 }} />\n              </colgroup>\n              <thead></thead>\n              <tbody>\n                <tr>\n                  <th></th>\n                  <th>Chat</th>\n                </tr>\n                {msgs.map((item, i) => {\n                  return (\n                    <tr key={i}>\n                      <td>{item[1]}</td>\n                      <td>{item[0]}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      );\n    }\n    return <LandingPage />;\n  }\n}\n\nconst LandingPage: React.FC = () => {\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div className=\"jumbotron\" style={{ marginBottom: 50 }}>\n        <h1>Twitch Chat Counter</h1>\n        <p>\n          This simple app that groups similar chat messages and counts the\n          number of chat messages over some distinct length of time.\n        </p>\n        <p>\n          Use it to quickly poll for opinions of twitch chat or ask twitch chat\n          to pick from choices without resulting to strawpoll.\n        </p>\n        <p>\n          Example: <br /> Streamer: \"Ok, Twitch Chat. Type '1' for League of\n          Legends or type '2' for Valorant.\"\n        </p>\n      </div>\n      <div>\n        <a\n          href={`https://id.twitch.tv/oauth2/authorize?client_id=n2dcw3bkj5qydrsupnwaozwazraw8f&redirect_uri=${document.location.href}&response_type=token&scope=chat:read`}\n          style={{\n            backgroundColor: \"#6441a5\",\n            color: \"white\",\n            padding: 10,\n            borderRadius: 10,\n          }}\n        >\n          Login with Twitch to count chat\n        </a>\n      </div>\n    </div>\n  );\n};\n\nfunction getHashParams() {\n  var hashParams: { [key: string]: string } = {};\n  var e,\n    a = /\\+/g, // Regex for replacing addition symbol with a space\n    r = /([^&;=]+)=?([^&;]*)/g,\n    d = function (s: string) {\n      return decodeURIComponent(s.replace(a, \" \"));\n    },\n    q = window.location.hash.substring(1);\n\n  while ((e = r.exec(q))) hashParams[d(e[1])] = d(e[2]);\n\n  return hashParams;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}